// Generated by CoffeeScript 1.9.3
(function() {
  app.mobilePlayer = (function() {
    function mobilePlayer(config) {
      this.options = {
        holderSelector: null,
        deviceMaxDegree: 45,
        audioVolume: 0.5,
        sources: [],
        controlsHeight: 50
      };
      this.options = $.extend(this.options, config);
      this.ratio = 56.25;
      this.muted = false;
      this.loop = true;
      this.audioVolumeInitial = this.options.audioVolume;
    }

    mobilePlayer.prototype.init = function() {
      this.$holder = $(this.options.holderSelector);
      this.$holder.addClass('player-holder');
      this.$player = this.getPlayer();
      this.video = this.$player.get(0);
      this.$video = $(this.$player.get(0));
      this.$play = this.$player.find('.play');
      this.$pause = this.$player.find('.pause');
      this.$loop = this.$player.find('.loop');
      this.$progress = this.$player.find('.progress');
      this.$loadedBar = this.$player.find('.loaded-bar');
      this.$currentTimeBar = this.$player.find('.current-time-bar');
      this.$time = this.$player.find('.time');
      this.$volumeUp = this.$player.find('.volume-up');
      this.$volumeDown = this.$player.find('.volume-down');
      this.$volumeLabel = this.$player.find('.volume-label');
      this.$fullscreen = this.$player.find('.fullscreen');
      this.setVolume(this.options.audioVolume);
      return this.$pause.hide();
    };

    mobilePlayer.prototype.embed = function() {
      this.init();
      this.$holder.append(this.$player);
      this.setListeners();
      return this.handleResize();
    };

    mobilePlayer.prototype.setListeners = function() {
      var self;
      self = this;
      $(window).resize(function() {
        return self.handleResize();
      });
      this.$play.click(function() {
        return self.play();
      });
      this.$pause.click(function() {
        return self.pause();
      });
      this.$loop.click(function() {
        return self.handleLoopClick();
      });
      this.$fullscreen.click(function() {
        return self.handleFullscreenClick();
      });
      this.$volumeUp.click(function() {
        return self.volumeUp();
      });
      this.$volumeDown.click(function() {
        return self.volumeDown();
      });
      this.$volumeLabel.click(function() {
        return self.handleVolumeLabel();
      });
      if (window.DeviceOrientationEvent) {
        window.addEventListener('deviceorientation', function(evt) {
          return self.handleDeviceOrientation(evt);
        });
      }
      this.video.addEventListener('progress', function() {
        return self.handleProgress();
      });
      this.video.addEventListener('timeupdate', function() {
        return self.handleTimeUpdate();
      });
      this.video.addEventListener('ended', function() {
        return self.handleEnded();
      });
      this.$progress.click(function(evt) {
        return self.handleProgressClick(evt);
      });
      return $(document).on('keyup', function(evt) {
        return self.handleEscapeKey(evt);
      });
    };

    mobilePlayer.prototype.play = function() {
      this.video.play();
      this.updateTime();
      this.$play.hide();
      return this.$pause.show();
    };

    mobilePlayer.prototype.pause = function() {
      this.video.pause();
      this.$pause.hide();
      return this.$play.show();
    };

    mobilePlayer.prototype.mute = function() {
      this.video.muted = true;
      return this.setVolume(0);
    };

    mobilePlayer.prototype.unmute = function() {
      this.video.muted = true;
      return this.setVolume(this.audioVolumeInitial);
    };

    mobilePlayer.prototype.handleLoopClick = function() {
      if (this.loop) {
        this.loop = false;
        this.video.loop = false;
        return this.$loop.addClass('disabled');
      } else {
        this.loop = true;
        this.video.loop = true;
        return this.$loop.removeClass('disabled');
      }
    };

    mobilePlayer.prototype.handleEscapeKey = function(evt) {
      if (this.fullscreen && evt.keyCode === 27) {
        return this.disableFullscreen();
      }
    };

    mobilePlayer.prototype.handleFullscreenClick = function() {
      if (this.fullscreen) {
        return this.disableFullscreen();
      } else {
        return this.enableFullscreen();
      }
    };

    mobilePlayer.prototype.enableFullscreen = function() {
      var elem, method;
      elem = document.documentElement;
      method = this.getFullScreenMethod(elem);
      if (!method.request) {
        return;
      }
      this.fullscreen = true;
      this.$fullscreen.addClass('disabled');
      return method.request.call(elem);
    };

    mobilePlayer.prototype.disableFullscreen = function() {
      var elem, method;
      elem = document.documentElement;
      method = this.getFullScreenMethod(elem);
      method.cancel.call(document);
      this.fullscreen = false;
      return this.$fullscreen.removeClass('disabled');
    };

    mobilePlayer.prototype.getFullScreenMethod = function(elem) {
      var method;
      return method = {
        request: elem.requestFullScreen || elem.webkitRequestFullScreen || elem.mozRequestFullScreen,
        cancel: document.exitFullscreen || document.webkitExitFullscreen || document.mozCancelFullScreen
      };
    };

    mobilePlayer.prototype.handleVolumeLabel = function() {
      if (this.muted) {
        this.muted = false;
        return this.unmute();
      } else {
        this.muted = true;
        return this.mute();
      }
    };

    mobilePlayer.prototype.volumeUp = function() {
      return this.setVolume(this.options.audioVolume + 0.1);
    };

    mobilePlayer.prototype.volumeDown = function() {
      return this.setVolume(this.options.audioVolume - 0.1);
    };

    mobilePlayer.prototype.setVolume = function(v) {
      v = Math.min(Math.max(v, 0), 1);
      this.video.volume = v;
      this.options.audioVolume = v;
      if ((0.0 < v && v < 0.1)) {
        v = 0;
      } else if ((0.9 < v && v < 1)) {
        v = 1;
      }
      this.$volumeLabel.find('i').hide();
      v = (v * 10).toFixed(0);
      if (parseInt(v) === 0) {
        this.video.muted = true;
        this.muted = true;
        this.$volumeLabel.find('i.icon-volume-mute').show();
        return;
      } else if ((0 < v && v < 5)) {
        this.$volumeLabel.find('i.icon-volume-low').show();
      } else if ((5 <= v && v < 8)) {
        this.$volumeLabel.find('i.icon-volume-medium').show();
      } else if (v >= 8) {
        this.$volumeLabel.find('i.icon-volume-high').show();
      }
      this.video.muted = false;
      return this.muted = false;
    };

    mobilePlayer.prototype.handleDeviceOrientation = function(evt) {
      return this.changeOrientation(evt.beta * -1, evt.gamma);
    };

    mobilePlayer.prototype.changeOrientation = function(xdeg, ydeg) {
      xdeg = Math.min(Math.max(xdeg, -this.options.deviceMaxDegree), this.options.deviceMaxDegree);
      ydeg = Math.min(Math.max(ydeg, -this.options.deviceMaxDegree), this.options.deviceMaxDegree);
      if ($(window).height() > $(window).width()) {
        return this.$video.css('transform', "rotateX(" + xdeg + "deg) rotateY(" + ydeg + "deg)");
      } else {
        return this.$video.css('transform', "rotateX(" + ydeg + "deg) rotateY(" + xdeg + "deg)");
      }
    };

    mobilePlayer.prototype.handleProgressClick = function(evt) {
      var length, x, xl, xr;
      xl = this.$progress.get(0).getBoundingClientRect().left;
      xr = xl + this.$progress.get(0).getBoundingClientRect().width;
      length = xr - xl;
      x = evt.pageX - xl;
      return this.video.currentTime = (x * this.video.duration) / length;
    };

    mobilePlayer.prototype.handleProgress = function() {
      if (!this.video.buffered.length) {
        return true;
      }
      return this.$loadedBar.css({
        left: 0,
        right: (Math.floor(100 - (100 * (this.video.buffered.end(0)) / this.video.duration))) + "%"
      });
    };

    mobilePlayer.prototype.handleTimeUpdate = function() {
      var currentTime, duration;
      duration = this.video.duration;
      currentTime = this.video.currentTime;
      this.$currentTimeBar.css({
        left: 0,
        right: (Math.floor(100 - ((currentTime / duration) * 100))) + "%"
      });
      return this.updateTime();
    };

    mobilePlayer.prototype.handleEnded = function() {
      this.$pause.hide();
      return this.$play.show();
    };

    mobilePlayer.prototype.updateTime = function() {
      return this.$time.text((this.msToTime(this.video.currentTime * 1000)) + "/\n" + (this.msToTime(this.video.duration * 1000)));
    };

    mobilePlayer.prototype.getPlayer = function() {
      var $player, i, len, playerHTML, ref, source;
      playerHTML = "<video loop\">\n</video>\n<div class=\"controls\">\n    <button class=\"play\" title=\"Play\">\n        <i class=\"icon icon-play3\"></i>\n    </button>\n    <button class=\"pause\" title=\"Pause\">\n        <i class=\"icon icon-pause2\"></i>\n    </button>\n    <button class=\"loop\" title=\"Loop\">\n        <i class=\"icon icon-loop\"></i>\n    </button>\n    <div class=\"progress-holder\">\n        <div class=\"progress\">\n            <div class=\"bar current-time-bar\">\n            </div>\n            <div class=\"bar loaded-bar\">\n            </div>\n        </div>\n        <div class=\"time\">\n            00:00\n        </div>\n    </div>\n    <button class=\"volume-down\" title=\"Volume Down\">\n        <i class=\"icon icon-volume-decrease\"></i>\n    </button>\n    <button class=\"volume-up\" title=\"Volume Up\">\n        <i class=\"icon icon-volume-increase\"></i>\n    </button>\n    <button class=\"volume-label\" title=\"Volume\">\n        <i class=\"icon icon-volume-high\"></i>\n        <i class=\"icon icon-volume-medium\"></i>\n        <i class=\"icon icon-volume-low\"></i>\n        <i class=\"icon icon-volume-mute\"></i>\n        <i class=\"icon icon-volume-mute2\"></i>\n    </button>\n    <button class=\"fullscreen\" title=\"Fullscreen\">\n        <i class=\"icon icon-enlarge\"></i>\n    </button>\n</div>";
      $player = $(playerHTML);
      ref = this.options.sources;
      for (i = 0, len = ref.length; i < len; i++) {
        source = ref[i];
        $($player.get(0)).append("<source src=\"" + source.src + "\" type=\"" + source.type + "\" />");
      }
      return $player;
    };

    mobilePlayer.prototype.handleResize = function() {
      var H, W, w;
      W = $(window).width();
      H = $(window).height() - this.options.controlsHeight;
      w = this.getPossibleWidth(W, H);
      this.setSize(w, ((w * this.ratio) / 100) + this.options.controlsHeight);
      return this.reposition();
    };

    mobilePlayer.prototype.getPossibleWidth = function(w, h) {
      var wanted_h;
      wanted_h = w * this.ratio * 100;
      while (wanted_h > h) {
        w = w - 1;
        wanted_h = (w * this.ratio) / 100;
      }
      return w;
    };

    mobilePlayer.prototype.reposition = function() {
      var margin_top;
      margin_top = ($(window).height() - this.$holder.height()) / 2;
      if (margin_top < 0) {
        margin_top = 0;
      }
      return this.$holder.css('margin-top', margin_top);
    };

    mobilePlayer.prototype.setSize = function(w, h) {
      this.$holder.width(w);
      return this.$holder.height(h);
    };

    mobilePlayer.prototype.msToTime = function(duration) {
      var hours, milliseconds, minutes, seconds;
      milliseconds = parseInt((duration % 1000) / 100);
      seconds = parseInt((duration / 1000) % 60);
      minutes = parseInt((duration / (1000 * 60)) % 60);
      hours = parseInt((duration / (1000 * 60 * 60)) % 24);
      hours = hours < 10 ? "0" + hours : hours;
      minutes = minutes < 10 ? "0" + minutes : minutes;
      seconds = seconds < 10 ? "0" + seconds : seconds;
      if (hours === !'00') {
        return hours + ":" + minutes + ":" + seconds;
      } else {
        return minutes + ":" + seconds;
      }
    };

    return mobilePlayer;

  })();

}).call(this);
