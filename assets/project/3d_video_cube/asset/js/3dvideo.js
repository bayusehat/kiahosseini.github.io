// Generated by CoffeeScript 1.9.3
(function() {
  var base;

  if ((base = String.prototype).endsWith == null) {
    base.endsWith = function(s) {
      return s === '' || this.slice(-s.length) === s;
    };
  }

  app.videoCube = (function() {
    videoCube.sideClasses = {
      1: 'front',
      2: 'back',
      3: 'right',
      4: 'left',
      5: 'top',
      6: 'bottom'
    };

    function videoCube(config) {
      this.options = {
        width: '500px',
        parentSelectorForWidthScale: 'body',
        mouseDegreeBase: 90,
        vimeoId: null,
        holderSelector: null,
        keyDegree: 10,
        audioVolume: 0.7,
        transitionTime: 600
      };
      this.options = $.extend(this.options, config);
      this.ratio = 56.25;
      this.initialX = 0;
      this.initialY = 0;
      this.currentX = -20;
      this.currentY = 45;
      this.tmpX = 0;
      this.tmpY = 0;
      this.moving = false;
    }

    videoCube.prototype.init = function() {
      this.$holder = $(this.options.holderSelector);
      this.$holder.addClass('cube-holder');
      this.$cube = this.getCube();
      this.$shadow = this.getCubeShadow();
      this.$startVideo = this.getStartVideo();
      return this.updateSizes();
    };

    videoCube.prototype.updateSizes = function() {
      var size, startH, startSize, startW;
      size = this.calcWidth();
      this.$holder.css({
        width: size,
        height: size,
        marginLeft: -size / 2,
        marginTop: -size / 2,
        perspective: size * 10
      });
      startSize = Math.min(size * 3, $(window).width());
      startW = this.getPossibleWidth(startSize, $(window).height());
      startH = startW * this.ratio / 100;
      this.$startVideo.css({
        width: startW,
        height: startH,
        marginLeft: -(startW - size) / 2,
        marginTop: -(startH - size) / 2
      });
      this.$cube.find('.back').css('transform', "translateZ(" + (-size / 2) + "px) rotateY(180deg)");
      this.$cube.find('.right').css('transform', "rotateY(-270deg) translateX(" + (size / 2) + "px)");
      this.$cube.find('.left').css('transform', "rotateY(270deg) translateX(" + (-size / 2) + "px)");
      this.$cube.find('.top').css('transform', "rotateX(90deg) translateY(" + (-size / 2) + "px)");
      this.$cube.find('.bottom').css('transform', "rotateX(270deg) translateY(" + (size / 2) + "px)");
      return this.$cube.find('.front').css('transform', "translateZ(" + (size / 2) + "px)");
    };

    videoCube.prototype.calcWidth = function() {
      var W, w;
      w = this.options.width;
      if (w.endsWith('%')) {
        W = $(this.options.parentSelectorForWidthScale).width();
        return W * parseInt(w) / 100;
      }
      return parseInt(w);
    };

    videoCube.prototype.getPossibleWidth = function(w, h) {
      var wanted_h;
      wanted_h = w * this.ratio * 100;
      while (wanted_h > h) {
        w = w - 1;
        wanted_h = (w * this.ratio) / 100;
      }
      return w;
    };

    videoCube.prototype.embed = function() {
      this.init();
      this.$holder.append(this.$startVideo);
      this.$holder.append(this.$cube);
      this.$holder.append(this.$shadow);
      this.buildPlayerAPIs();
      this.playAll();
      return this.setListeners();
    };

    videoCube.prototype.setListeners = function() {
      var self;
      self = this;
      this.$startVideo.click(function() {
        self.$holder.on('mousedown', function(e) {
          return self.bindMouseMove(e);
        });
        $('body').keydown(function(evt) {
          return self.handleKey(evt);
        });
        return self.handleStartClick();
      });
      this.$holder.on("contextmenu", function() {
        return false;
      });
      $(window).resize(function() {
        return self.updateSizes();
      });
      return this.$cube.find('.side').dblclick(function() {
        return self.handleVolume($(this));
      });
    };

    videoCube.prototype.bindMouseMove = function(e) {
      var self;
      e.preventDefault();
      self = this;
      this.initialX = e.pageX;
      this.initialY = e.pageY;
      this.tmpX = this.currentX;
      this.tmpY = this.currentY;
      this.moving = true;
      this.$holder.on('mousemove', function(e) {
        return self.handleMouseMove(e);
      });
      return $(document).on('mouseup', function() {
        return self.unbindMouseMove();
      });
    };

    videoCube.prototype.handleStartClick = function() {
      var callback, self;
      self = this;
      this.$startVideo.addClass('hidden');
      callback = function() {
        var _callback;
        _callback = function() {
          return self.rotate(self.currentX, self.currentY);
        };
        self.$startVideo.hide();
        self.$cube.addClass('shown');
        self.$shadow.addClass('shown');
        return window.setTimeout(_callback, self.options.transitionTime);
      };
      return window.setTimeout(callback, self.options.transitionTime);
    };

    videoCube.prototype.handleMouseMove = function(e) {
      var xdeg, ydeg;
      if (!this.moving) {
        return;
      }
      xdeg = this.calcXDeg(this.initialY - e.pageY);
      ydeg = this.calcYDeg(e.pageX - this.initialX);
      this.tmpX = this.currentX + xdeg;
      this.tmpY = this.currentY + ydeg;
      return this.rotate(this.tmpX, this.tmpY);
    };

    videoCube.prototype.handleKey = function(evt) {
      var code, xdeg, ydeg;
      ydeg = this.currentY;
      xdeg = this.currentX;
      code = evt.keyCode;
      if (!(code === 32 || code === 37 || code === 38 || code === 39 || code === 40)) {
        return;
      }
      if (code === 32) {
        ydeg = 0;
        xdeg = 0;
      } else if (code === 37) {
        ydeg -= this.options.keyDegree;
      } else if (code === 38) {
        xdeg += this.options.keyDegree;
        evt.preventDefault();
      } else if (code === 39) {
        ydeg += this.options.keyDegree;
      } else if (code === 40) {
        xdeg -= this.options.keyDegree;
      }
      this.rotate(xdeg, ydeg);
      return this.setCurrentXY(xdeg, ydeg);
    };

    videoCube.prototype.rotate = function(x, y) {
      this.setShadow(x, y);
      return this.$cube.css('transform', "rotateX(" + x + "deg) rotateY(" + y + "deg)");
    };

    videoCube.prototype.setShadow = function(x, y) {
      var scale, width;
      y = y % 45;
      width = 8 + (4 * Math.abs(y)) / 45;
      scale = 1 + (0.2 * Math.abs(y)) / 45;
      return this.$shadow.css({
        transform: "scale(@{scale})",
        "box-shadow": "0 0 5em " + width + "px"
      });
    };

    videoCube.prototype.setCurrentXY = function(x, y) {
      this.currentX = x;
      return this.currentY = y;
    };

    videoCube.prototype.unbindMouseMove = function() {
      var self;
      self = this;
      this.moving = false;
      this.setCurrentXY(this.tmpX, this.tmpY);
      this.$holder.off('mousemove');
      return $(document).off('mouseup');
    };

    videoCube.prototype.playAll = function(duration) {
      var currentTime, gapLength, self;
      self = this;
      currentTime = 0;
      if (!duration) {
        this.$cube.find('.front').data('player').getDuration().then(function(num) {
          return self.playAll(num);
        });
        return;
      }
      gapLength = duration / Object.keys(this.constructor.sideClasses).length;
      return this.$cube.find('.side').each(function() {
        var player;
        player = $(this).data('player');
        player.setCurrentTime(currentTime);
        player.setLoop(true);
        player.setVolume(0);
        currentTime += gapLength;
        return player.play();
      });
    };

    videoCube.prototype.muteAll = function() {
      var self;
      self = this;
      return this.$cube.find('.side').each(function() {
        var player;
        player = $(this).data('player');
        return player.setVolume(0);
      });
    };

    videoCube.prototype.handleVolume = function($side) {
      this.muteAll();
      if (!$side.data('unmuted')) {
        this.unmute($side);
        return $side.data('unmuted', true);
      } else {
        this.mute($side);
        return $side.data('unmuted', false);
      }
    };

    videoCube.prototype.unmute = function($side) {
      return $side.data('player').setVolume(this.options.audioVolume);
    };

    videoCube.prototype.mute = function($side) {
      return $side.data('player').setVolume(0);
    };

    videoCube.prototype.calcXDeg = function(length) {
      return ((length * this.options.mouseDegreeBase) / this.$cube.width()) % this.options.mouseDegreeBase;
    };

    videoCube.prototype.calcYDeg = function(length) {
      return ((length * this.options.mouseDegreeBase) / this.$cube.height()) % this.options.mouseDegreeBase;
    };

    videoCube.prototype.buildPlayerAPIs = function() {
      var $side, className, num, ref, results;
      ref = this.constructor.sideClasses;
      results = [];
      for (num in ref) {
        className = ref[num];
        $side = this.$cube.find("." + className);
        results.push($side.data('player', new Vimeo.Player("iframe-" + className)));
      }
      return results;
    };

    videoCube.prototype.getCube = function() {
      var $cube, className, cubeHTML, num, ref, sideHTML, url;
      cubeHTML = "<div class=\"cube\">\n</div>";
      $cube = $(cubeHTML);
      ref = this.constructor.sideClasses;
      for (num in ref) {
        className = ref[num];
        url = "https://player.vimeo.com/video/" + this.options.vimeoId;
        sideHTML = "<div class=\"side " + className + "\">\n    <iframe id=\"iframe-" + className + "\"\n            src=\"" + url + "?api=1&player_id=iframe-" + className + "\" \n            width=\"640\" \n            height=\"360\" \n            frameborder=\"0\" \n            webkitallowfullscreen \n            mozallowfullscreen \n            allowfullscreen>\n    </iframe>\n</div>";
        $cube.append($(sideHTML));
      }
      return $cube;
    };

    videoCube.prototype.getStartVideo = function() {
      var startVideoHTML;
      startVideoHTML = "<div class=\"start-video\">\n    <iframe src=\"https://player.vimeo.com/video/" + this.options.vimeoId + "\" \n            frameborder=\"0\" \n            webkitallowfullscreen \n            mozallowfullscreen \n            allowfullscreen>\n    </iframe>\n</div>";
      return $(startVideoHTML);
    };

    videoCube.prototype.getCubeShadow = function() {
      var shadowHTML;
      shadowHTML = "<div class=\"shadow\">\n</div>";
      return $(shadowHTML);
    };

    return videoCube;

  })();

}).call(this);
